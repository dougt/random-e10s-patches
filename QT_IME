diff --git a/widget/src/qt/mozqwidget.cpp b/widget/src/qt/mozqwidget.cpp
--- a/widget/src/qt/mozqwidget.cpp
+++ b/widget/src/qt/mozqwidget.cpp
@@ -13,16 +13,17 @@
 #include <QtCore/QEvent>
 #include <QtCore/QVariant>
 
 
 MozQWidget::MozQWidget(nsWindow* aReceiver, QGraphicsItem* aParent)
     : QGraphicsWidget(aParent),
       mReceiver(aReceiver)
 {
+    setFlag(QGraphicsItem::ItemAcceptsInputMethod);
 }
 
 MozQWidget::~MozQWidget()
 {
     if (mReceiver)
         mReceiver->QWidgetDestroyed();
 }
 
@@ -214,8 +215,59 @@ bool MozQWidget::SetCursor(const QPixmap
 void MozQWidget::setModal(bool modal)
 {
 #if QT_VERSION >= 0x040600
     setPanelModality(modal ? QGraphicsItem::SceneModal : QGraphicsItem::NonModal);
 #else
     LOG(("Modal QGraphicsWidgets not supported in Qt < 4.6\n"));
 #endif
 }
+
+void MozQWidget::showVKB()
+{
+    QWidget* focusWidget = qApp->focusWidget();
+
+    if (focusWidget) {
+
+        QInputContext *inputContext = qApp->inputContext();
+        if (!inputContext) {
+            NS_WARNING("Requesting SIP: but no input context");
+            return;
+        }
+
+        QEvent request(QEvent::RequestSoftwareInputPanel);
+        inputContext->filterEvent(&request);
+        focusWidget->setAttribute(Qt::WA_InputMethodEnabled, true);
+        inputContext->setFocusWidget(focusWidget);
+    }
+}
+
+void MozQWidget::hideVKB()
+{
+    QInputContext *inputContext = qApp->inputContext();
+    if (!inputContext) {
+        NS_WARNING("Closing SIP: but no input context");
+        return;
+    }
+
+    QEvent request(QEvent::CloseSoftwareInputPanel);
+    inputContext->filterEvent(&request);
+    inputContext->reset();
+}
+
+/**
+    This method checks the state of the virtual keyboard by checking the list
+    of occupied rectangles. If this list is empty, the keyboard is considered
+    to be closed.
+
+    @return true, if opened; false if closed
+*/
+bool MozQWidget::isVKBOpen()
+{
+    QVariantList areas;
+    QInputContext* input_context = qApp->inputContext();
+
+    if (0 != input_context)
+        areas = input_context->property("InputMethodArea").toList();
+
+    // if it is empty, no VKB visible; otherwise it is
+    return areas.empty();
+}
diff --git a/widget/src/qt/mozqwidget.h b/widget/src/qt/mozqwidget.h
--- a/widget/src/qt/mozqwidget.h
+++ b/widget/src/qt/mozqwidget.h
@@ -27,16 +27,23 @@ public:
     void setModal(bool);
     bool SetCursor(nsCursor aCursor);
     void dropReceiver() { mReceiver = 0x0; };
     nsWindow* getReceiver() { return mReceiver; };
 
     void activate();
     void deactivate();
 
+    /**
+     * VirtualKeyboardIntegration
+     */
+    void showVKB();
+    void hideVKB();
+    bool isVKBOpen();
+
 protected:
     virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent* aEvent);
     virtual void dragEnterEvent(QGraphicsSceneDragDropEvent* aEvent);
     virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent* aEvent);
     virtual void dragMoveEvent(QGraphicsSceneDragDropEvent* aEvent);
     virtual void dropEvent(QGraphicsSceneDragDropEvent* aEvent);
     virtual void focusInEvent(QFocusEvent* aEvent);
     virtual void focusOutEvent(QFocusEvent* aEvent);
diff --git a/widget/src/qt/nsWindow.cpp b/widget/src/qt/nsWindow.cpp
--- a/widget/src/qt/nsWindow.cpp
+++ b/widget/src/qt/nsWindow.cpp
@@ -2233,8 +2233,32 @@ nsWindow::OnDestroy(void)
 PRBool
 nsWindow::AreBoundsSane(void)
 {
     if (mBounds.width > 0 && mBounds.height > 0)
         return PR_TRUE;
 
     return PR_FALSE;
 }
+
+ NS_IMETHODIMP
+ nsWindow::SetIMEEnabled(PRUint32 aState)
+ {
+     switch (aState) {
+         case nsIWidget::IME_STATUS_ENABLED:
+         case nsIWidget::IME_STATUS_PASSWORD:
+             mWidget->showVKB();
+             break;
+         default:
+             mWidget->hideVKB();
+             break;
+     }
+ 
+     return NS_OK;
+ }
+ 
+ NS_IMETHODIMP nsWindow::GetIMEEnabled(PRUint32* aState)
+ {
+     NS_ENSURE_ARG_POINTER(aState);
+      *aState = mWidget->isVKBOpen() ? IME_STATUS_ENABLED : IME_STATUS_DISABLED;
+     return NS_OK;
+ }
+
diff --git a/widget/src/qt/nsWindow.h b/widget/src/qt/nsWindow.h
--- a/widget/src/qt/nsWindow.h
+++ b/widget/src/qt/nsWindow.h
@@ -182,16 +182,19 @@ public:
                                            PRBool aDoCapture,
                                            PRBool aConsumeRollupEvent);
 
     NS_IMETHOD         SetWindowClass(const nsAString& xulWinType);
 
     NS_IMETHOD         GetAttention(PRInt32 aCycleCount);
     NS_IMETHOD         BeginResizeDrag   (nsGUIEvent* aEvent, PRInt32 aHorizontal, PRInt32 aVertical);
 
+    NS_IMETHODIMP      SetIMEEnabled(PRUint32 aState);
+    NS_IMETHODIMP      GetIMEEnabled(PRUint32* aState);
+
     //
     // utility methods
     //
     void               QWidgetDestroyed();
 
     /***** from CommonWidget *****/
 
     // event handling code
