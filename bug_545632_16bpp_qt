diff --git a/gfx/thebes/src/gfxQtPlatform.cpp b/gfx/thebes/src/gfxQtPlatform.cpp
--- a/gfx/thebes/src/gfxQtPlatform.cpp
+++ b/gfx/thebes/src/gfxQtPlatform.cpp
@@ -196,44 +196,54 @@ gfxQtPlatform::CreateOffscreenSurface(co
 
     if (mRenderMode == RENDER_QPAINTER) {
       newSurface = new gfxQPainterSurface(size, gfxASurface::ContentFromFormat(imageFormat));
       return newSurface.forget();
     }
 
     if (mRenderMode == RENDER_BUFFERED &&
         sDefaultQtPaintEngineType != QPaintEngine::X11) {
+
+        //??
+        if (imageFormat == gfxASurface::ImageFormatRGB24 && QX11Info().depth() == 16)
+            imageFormat = gfxASurface::ImageFormatRGB16;
+        
       newSurface = new gfxImageSurface(size, imageFormat);
       return newSurface.forget();
     }
 
 #ifdef MOZ_X11
     int xrenderFormatID = -1;
     switch (imageFormat) {
         case gfxASurface::ImageFormatARGB32:
             xrenderFormatID = PictStandardARGB32;
             break;
         case gfxASurface::ImageFormatRGB24:
             xrenderFormatID = PictStandardRGB24;
             break;
+        case gfxASurface::ImageFormatRGB16:
+            break;
         case gfxASurface::ImageFormatA8:
             xrenderFormatID = PictStandardA8;
             break;
         case gfxASurface::ImageFormatA1:
             xrenderFormatID = PictStandardA1;
             break;
         default:
             return nsnull;
     }
 
     // XXX we really need a different interface here, something that passes
     // in more context, including the display and/or target surface type that
     // we should try to match
-    XRenderPictFormat* xrenderFormat =
-        XRenderFindStandardFormat(QX11Info().display(), xrenderFormatID);
+    XRenderPictFormat* xrenderFormat = nsnull;
+    if ((xrenderFormatID == PictStandardRGB24 && QX11Info().depth() == 16) || xrenderFormatID == -1)
+        xrenderFormat = XRenderFindVisualFormat(QX11Info().display(), (Visual*)QX11Info().visual());
+    else
+        xrenderFormat = XRenderFindStandardFormat(QX11Info().display(), xrenderFormatID);
 
     newSurface = new gfxXlibSurface((Display*)QX11Info().display(),
                                     xrenderFormat,
                                     size);
 #endif
 
     if (newSurface) {
         gfxContext ctx(newSurface);
diff --git a/widget/src/qt/nsWindow.cpp b/widget/src/qt/nsWindow.cpp
--- a/widget/src/qt/nsWindow.cpp
+++ b/widget/src/qt/nsWindow.cpp
@@ -212,16 +212,18 @@ nsWindow::nsWindow()
 static inline gfxASurface::gfxImageFormat
 _depth_to_gfximage_format(PRInt32 aDepth)
 {
     switch (aDepth) {
     case 32:
         return gfxASurface::ImageFormatARGB32;
     case 24:
         return gfxASurface::ImageFormatRGB24;
+    case 16:
+        return gfxASurface::ImageFormatRGB16;
     default:
         return gfxASurface::ImageFormatUnknown;
     }
 }
 
 static inline QImage::Format
 _gfximage_to_qformat(gfxASurface::gfxImageFormat aFormat)
 {
