diff --git a/widget/src/qt/mozqwidget.cpp b/widget/src/qt/mozqwidget.cpp
--- a/widget/src/qt/mozqwidget.cpp
+++ b/widget/src/qt/mozqwidget.cpp
@@ -13,20 +13,19 @@
 #include "mozqwidget.h"
 #include "nsWindow.h"
 
 
 MozQWidget::MozQWidget(nsWindow* aReceiver, QGraphicsItem* aParent)
     : QGraphicsWidget(aParent),
       mReceiver(aReceiver)
 {
-    setFlag(QGraphicsItem::ItemAcceptsInputMethod);
+ #if (QT_VERSION >= QT_VERSION_CHECK(4, 6, 0))
+     setFlag(QGraphicsItem::ItemAcceptsInputMethod);
 
-    // Enable gestures: only available in qt > 4.6
- #if (QT_VERSION >= QT_VERSION_CHECK(4, 6, 0))
      setAcceptTouchEvents(true);
      grabGesture(Qt::PinchGesture);
  #endif
 }
 
 MozQWidget::~MozQWidget()
 {
     if (mReceiver)
@@ -260,56 +259,68 @@ void MozQWidget::setModal(bool modal)
 
 QVariant MozQWidget::inputMethodQuery(Qt::InputMethodQuery aQuery) const
 {
     return QGraphicsWidget::inputMethodQuery(aQuery);
 }
 
 void MozQWidget::showVKB()
 {
+#if (QT_VERSION >= QT_VERSION_CHECK(4, 6, 0))
     QWidget* focusWidget = qApp->focusWidget();
 
     if (focusWidget) {
         QInputContext *inputContext = qApp->inputContext();
         if (!inputContext) {
             NS_WARNING("Requesting SIP: but no input context");
             return;
         }
 
         QEvent request(QEvent::RequestSoftwareInputPanel);
         inputContext->filterEvent(&request);
         focusWidget->setAttribute(Qt::WA_InputMethodEnabled, true);
         inputContext->setFocusWidget(focusWidget);
     }
+#else
+    LOG(("VKB not supported in Qt < 4.6\n"));
+#endif
 }
 
 void MozQWidget::hideVKB()
 {
+ #if (QT_VERSION >= QT_VERSION_CHECK(4, 6, 0))
     QInputContext *inputContext = qApp->inputContext();
     if (!inputContext) {
         NS_WARNING("Closing SIP: but no input context");
         return;
     }
 
     QEvent request(QEvent::CloseSoftwareInputPanel);
     inputContext->filterEvent(&request);
     inputContext->reset();
+#else
+    LOG(("VKB not supported in Qt < 4.6\n"));
+#endif
 }
 
 /**
     This method checks the state of the virtual keyboard by checking the list
     of occupied rectangles. If this list is empty, the keyboard is considered
     to be closed.
 
     @return true, if opened; false if closed
 */
 bool MozQWidget::isVKBOpen()
 {
+#if (QT_VERSION >= QT_VERSION_CHECK(4, 6, 0))
     QVariantList areas;
     QInputContext* input_context = qApp->inputContext();
 
     if (input_context)
         areas = input_context->property("InputMethodArea").toList();
 
     // if it is empty, no VKB visible; otherwise it is
     return areas.empty();
+#else
+    return PR_FALSE;
+#endif
 }
 
